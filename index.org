#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t reveal_title_slide:nil reveal_global_footer:f
#+REVEAL_HIGHLIGHT_CSS: solarized
#+REVEAL_THEME: solarized
#+REVEAL_ROOT: ./reveal.js-3.8.0

* Dwarlixir
Mistakes were made
** The Big Elixir 2019's theme
[Talks that present] *new ways of thinking* [...] and talk deeply about *lessons learned* [...].

We want to hear about [...] *the very strange*.

#+begin_notes
My brain dropped pretty much everything except for these parts.

And I thought...

Perfect. I have just the thing.
#+end_notes
*** Who you're listening to
Aldric Giacomoni

~@trevoke~

Director of Engineering at Stash
#+begin_notes
<3 Ruby, Smalltalk，Lisp, Elixir

Wrote code for about a decade

<3 extreme programming, lean, agile

Talk to me after the session!

We are hiring; our stack is Ruby and Scala, there's no Elixir... Yet!
#+end_notes
*** Why this talk? 1/2
#+begin_quote
You got to lose to know

How to win

― Dream On, Aerosmith
#+end_quote

#+begin_notes
- never get to open with song lyrics
- how cool am I?
- two reasons
- reason 1:
- continuous improvement is critical
- intentional experiments
- failure
- eventual success
- In Radical Candor, Andy Grove says of Steve Jobs:
"I didn't say Steve /is/ always right. I said he always /gets/ it right. Like anyone, he is wrong sometimes, but he insists, and not gently either, that people tell him when he's wrong, so he always gets it right in the end."
#+end_notes
*** Why this talk? 2/2
#+begin_quote
With every mistake we must surely be learning

Still my guitar gently weeps

― While My Guitar Gently Weeps, The Beatles
#+end_quote

#+begin_notes
- reason 2:
- impostor syndrome is a thing
- manifests differently for everyone
- I've got this fancy title now
- Made plenty of mistakes on the way
- We learn well with stories
#+end_notes
*** Apparently obligatory
Why?!

Why this side project?

#+begin_notes
Powell Kinney said this slide had to be there, so Ι added it.

why /NOT/ ?

This project has spawned so many good conversations

So many lessons

So many side projects

... Even a small open source community

Cherish your ideas! Who knows what their impact will be?
#+end_notes
** Establishing context
A mix of a MUD and Dwarf Fortress
*** What's a MUD?
#+REVEAL_HTML: <img class="stretch" src="discworld.png">

#+begin_notes
Multi-User Dungeon

Text-based multiplayer game

Read description

Write commands
#+end_notes

*** What's Dwarf Fortress?
#+REVEAL_HTML: <img class="stretch" src="dwarf-fortress.png">

#+begin_notes
Dwarf Fortress!

world simulation

lots of emergent behavior

players have fun because they create a lot of stories

What could possibly go wrong?

Let's find out!
#+end_notes

** So what we're gonna aim for is…
- A telnet connection for people
- A world map
- With time passing
- Creatures that can move
- Creatures that can die
- Creatures that can reproduce
- Balancing out the ecosystem
** Disclaimer
I am not a game designer.

Nothing here constitutes *good* advice.

Seriously.
#+begin_notes
There are many talks about good ideas.

This is a talk about bad ones.
#+end_notes
* Roadmap
- [0/6]
  - [ ] algorithm improvement
  - [ ] extreme local state
  - [ ] distributed state
  - [ ] schedulers and the "tick"
  - [ ] flooding processes
  - [ ] linux oom killer

#+begin_notes
- dip toes: algorithm improvement
- wrong kind of state in processes
- too much state in too many processes
- beam vm schedulers (erlang virtual machine)
- sending too many messages to processes
- linux protects itself
#+end_notes
* Algorithm improvement
** Misconception
A list is like an array

AKA "what's the deal with immutability anyway?"
** Story
World: Graph → Edges and nodes

1. "nodes" are just ids
2. generate one edge to a random node from each node
3. collect, breadth-first, edges into islands
4. create single edges between islands
*** Key code
#+begin_src elixir
  def traverse(node, _, visited) when node in visited, do: visited
  def traverse(node, edge_list, visited) do
    visited = [node | visited]
    edges_from_node = direct_edges(node, edge_list)
    Enum.flat_map(
      edges_from_node,
      fn({_s, dest}) -> traverse(dest, edge_list, visited) end
    )
  end
#+end_src

#+begin_notes
flat_map is what we care about here

We return nested lists!
#+end_notes
** Impact
Lots of data structures initialized recursively

Lots of data being copied when flattening

VERY SLOW
** Fix
#+begin_src elixir
  def traverse(node, _, visited) when node in visited, do: visited
  def traverse(node1, edge_list, visited) do
    visited = [node1 | visited]
    edges_from_node = direct_edges(node1, edge_list)
    Enum.reduce(
      edges_from_node,
      visited,
      fn({_a, b}, acc) -> traverse(b, edge_list, acc) end)
  end
#+end_src
#+begin_notes
Concatenating linked lists is significantly more performant than creating new ones all the time
#+end_notes
** Lessons
#+ATTR_REVEAL: :frag appear
1. copying data structures is expensive
** Roadmap
- [1/6]
  - [X] algorithm improvement
  - [ ] extreme local state
  - [ ] distributed state
  - [ ] schedulers and the "tick"
  - [ ] flooding processes
  - [ ] linux oom killer
* Extreme local state
** Misconception
local state has got to be better than global state

#+begin_notes
Alan Kay once wrote, "OOP to me means only messaging, local retention, and protection and hiding of state-process, and extreme late-binding of all things"

I thought.. What if.. I didn't use a database?
#+end_notes
** Story
"Actor model?" Moar like extreme object-oriented, amirite?

#+begin_notes
- Creatures are GenServers
- Local state: can have hat or sunglasses
- "random action"
- Imagine the person can say "Nice hat" or "Nice Sunglasses"
- But they have to /check/ first of course.
- So they send a synchronous message to other processes to check what the state is
#+end_notes
*** Synchronous call
A → B

B → A

A → ☺

#+begin_notes
Process A calls Process B

Process A blocks until it has received a response

A's message goes in B's mailbox, B eventually gets to it
#+end_notes
** Impact
Alice asks Bob /(and waits)/

Bob asks Charlie  /(and waits)/

Charlie asks Alice  /(and waits)/

#+begin_notes
- But.. Other processes are all doing the same thing!

DEADLOCKS!

Dun dun dunnn.
#+end_notes
*** Dining philosophers
The classic concurrency problem.

Check it out.

#+begin_notes
Each philosopher must alternately think and eat.

However, a philosopher can only eat spaghetti when they have both left and right forks.

Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher.

After an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others.

A philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks.
#+end_notes
** Fix
Tell, don't ask.
#+begin_notes
Essentially, don't ask for information, just say what you want to have happen.

This is a paradigm shift, and it causes fundamental architectural changes.
#+end_notes
** Lessons
#+ATTR_REVEAL: :frag (none appear)
1. copying data structures is expensive
2. tell, don't ask
** Roadmap
- [2/6]
  - [X] algorithm improvement
  - [X] extreme local state
  - [ ] distributed state
  - [ ] schedulers and the "tick"
  - [ ] flooding processes
  - [ ] linux oom killer
* Distributed state
#+begin_notes
I'd love to say that I figured out "some state is global" when I ran into the deadlocks

But Ι really wanted to not do databases. It's unclear whether I'm too stubborn or not smart enough.

Or both.
#+end_notes
** Misconception
Fewer synchronous calls will reduce the opportunity of deadlocks
#+begin_notes
real problem is which synchronous calls, not how many

In this story, I'm not even trying to solve the correct problem from the previous story

... Because I had misdiagnosed (which is a whole other talk)

I'm playing the race condition game
#+end_notes
** Story
Moar local state in moar local places
#+begin_notes
Instead of "each process has its own state and they'll be queried for state" ...
#+end_notes
*** Spaghetti state
- Dwarf has location exits, location id
- locations have dwarf info
#+begin_notes
I started to copy some data into each process, because that allowed me to do fewer synchronous calls.

There's a consequence here, right?

Every time a dwarf moves, a lot of state has to be updated
#+end_notes
** Impact
Accidentally multiple sources of truths
#+begin_notes
I created caches. Caches are very hard to invalidate.

Eric mentioned this in his keynote this morning.

It's one of the two hardest problems in programming, along with naming and off-by-one errors.
#+end_notes
** Fix
Some state is global
#+begin_notes
But there's a deep truth here

choices for where the state goes

hot deploys: basically inject code in running application, Erlang provides hooks for upgrading state

But that's a whole other talk

the big elixir last year

Desmond Bowe gave a talk about "stateful servers"

Highly recommended
#+end_notes
** Lessons
#+ATTR_REVEAL: :frag (none none appear)
  1. copying data structures is expensive
  2. tell, don't ask
  3. prefer a single source of truth
** Roadmap
- [3/6]
  - [X] algorithm improvement
  - [X] extreme local state
  - [X] distributed state
  - [ ] schedulers and the "tick"
  - [ ] flooding processes
  - [ ] linux oom killer
* Schedulers and the "tick"
#+begin_notes
"game of life"

the "tick" is the unit of time: every time a tick happens, everything in the world happens
#+end_notes
** Game of Life
#+REVEAL_HTML: <img class="stretch" src="gameoflife.png">

#+begin_notes
The short version:

All the filled cells are "alive"

Current board state is the input for the next board state

Computation for new state happens on every tick
#+end_notes
** Misconception
There won't be a noticeable impact to sending all my creatures a message at the same time

#+begin_notes
when the heartbeat happens every process acts
#+end_notes
** Story
The tick (not the blue one)

#+begin_notes
Registry (broadcast)

Petimer (managed recurring messages)

"Heartbeat manager process"

Pause life
#+end_notes
** Impact
All schedulers triggered at same time - literally a heartbeat of intense CPU usage on the box
#+REVEAL_HTML: <img class="stretch" src="scheduler.png">
#+begin_notes
BEAM VM has a pre-emptive scheduler

This means it coordinates the processes' actions, and that means it helps allocate CPU usage.

for a game - heartbeat every 1-6 seconds

So this was an incredibly regular cadence of CPU usage, and that also meant there was a clear upper bound to growth: at some point, CPUs wouldn't be able to allow every process to make their move at the same time.
#+end_notes
** Fix
More or less "any other way"

I opted for "all manage their own ticks"

Never mind how untestable that makes the system

Smarter fix is probably "bounded global ticks" so that some control can be exerted more easily
#+begin_notes
Eric vaguely pointed at something similar in his keynote

if you have a couple of rooms - control those with its own heartbeat manager

really didn't want "everything to act at the same time"

I wanted events - this is Elixir, damnit!
#+end_notes
** Lessons
#+ATTR_REVEAL: :frag (none none none appear)
  1. copying data structures is expensive
  2. tell, don't ask
  3. prefer a single source of truth
  4. understand your system's CPU needs
** Roadmap
- [4/6]
  - [X] algorithm improvement
  - [X] extreme local state
  - [X] distributed state
  - [X] schedulers and the "tick"
  - [ ] flooding processes
  - [ ] linux oom killer
* flooding processes
** Misconception
It's hard to send a single process too many messages
** Story
Every action is an event

Dwarlixir is decentralized
#+begin_notes
Apparently Eric had some version of this problem too

- every time something would happen in the "room" process
- an event would go to every living creature in the room so they could respond to it
- and players would have this event transformed to text
- again - every action in a room goes to every creature. that's N^2.
- N^2 is bad.
- with all the births, N was always increasing
#+end_notes
** Impact
- The locations crashed
- The mobs crashed
- The process that printed stuff to the console crashed
#+begin_notes

What did it have to do?
- create a string
- send it over the network (telnet)

I mentioned the pre-emptive scheduler before, here's how it works

Processes have "Reductions"

From Prolog - goal reduction, a building block action of a larger operation

pre-emptive scheduler means processes only get so many reductions before another process gets their turn

sending a message gets more expensive as THE RECEIVING PROCESS has more messages in the mailbox

elements of self-balancing in the VM

force rest of system to slow down to allow congestion to clear up

Crucially in my case: CPU time higher than time between messages

Processes are "single-threaded", process messages one at a time

Possibly constructing strings instead of IO strings made things worse

So this means the printer process had an ever-increasing mailbox
#+end_notes
** Fix
1. Cry
2. Batch messages
3. Research game design patterns
#+begin_notes
realization: current implementation needed more of a single heartbeat

Bad for user experience: non-live messages, can't respond reasonably

... Took me to Entity Component System - game design pattern

And that took me to a complete overhaul of the system

And that's a whole other talk about macros (might piggyback on top of Bruce's talk from yesterday and give this talk next year)
#+end_notes
** Lessons
#+ATTR_REVEAL: :frag (none none none none appear)
  1. copying data structures is expensive
  2. tell, don't ask
  3. prefer a single source of truth
  4. understand your system's CPU needs
  5. actors are single-threaded
** Roadmap
- [5/6]
  - [X] algorithm improvement
  - [X] extreme local state
  - [X] distributed state
  - [X] schedulers and the "tick"
  - [X] flooding processes
  - [ ] linux oom killer
* linux OOM killer
** Misconception
My world simulation won't grow unbounded in RAM usage
#+begin_notes
remember when Ι said I would balance the ecosystem?
#+end_notes
** Story
"Emergent Behavior"
#+begin_notes
Once I had fixed all the other problems, the system would be relatively stable

Or so I thought

I'd launch the game, and after an hour and a half someone would say "Hey, your game is down"
#+end_notes
** Impact
The operating system does what it needs to do to stay up
#+REVEAL_HTML: <img class="stretch" src="htop.png">
#+begin_notes
Linux has an out of memory killer

kill non-essential OS-level processes using too much RAM

We don't see this often because for the most part, the RAM that is "used" is actually free (it's not released back to the operating system)

I eventually figured it out because Ι launched the game and logged on to it, and on the server I launched htop

To a large extent, this actually was an indication of success

world simulation: reproduction and death

balancing lifespan with reproductive maturity, likelihood of becoming pregnant, and length of pregnancy is hard
#+end_notes
** Fix
Ecosystem
#+begin_notes
I literally created an Elixir process that would check regularly how much RAM was available

If less than 15% RAM was available, it would stop births

If more than 20% RAM available, allow births

prod systems are so much more predictable
#+end_notes
** Lessons
#+ATTR_REVEAL: :frag (none none none none none appear)
  1. copying data structures is expensive
  2. tell, don't ask
  3. prefer a single source of truth
  4. understand your system's CPU needs
  5. actors are single-threaded
  6. understand your system's RAM needs
** Roadmap
- [6/6]
  - [X] algorithm improvement
  - [X] extreme local state
  - [X] distributed state
  - [X] schedulers and the "tick"
  - [X] flooding processes
  - [X] linux oom killer
* BONUS
* Yak shaving
It's yaks all the way down
** Language Server Protocol
One server

One plugin per text editor

#+begin_notes
Thanks Microsoft!

Code completion, jump to definition, display documentation, etc.

This is what makes VSCode rock with Javascript
#+end_notes
** Editors matter
I use emacs

primary plugin: alchemist.el
#+begin_notes
All-encompassing tool for emacs

Tried to contribute, make some adjustments

Eventually tried to rewrite backend

Eventually just started a separate project only with LSP
#+end_notes
** Existing LSP projects
- Marlus Saraiva's ~elixir_sense~
- Jake Becker's ~elixir-ls~

#+begin_notes
elixir_sense is project analysis

elixir-ls is an editor-independent LS server

Both seemed "abandoned" - couldn't reach the authors
#+end_notes
** Created an org on Github
https://github.com/elixir-lsp
forked the projects, opened issues on original projects to explain why
** Created channel on Elixir Slack
elixir-lang.slack.com

#language-server
** Recruited folks
- @jason_axelson
- @asummers
#+begin_notes
Jason is the most active
#+end_notes
** Eventually the author of elixir_sense joined
Woot!
** Community is active
WOOT!
#+begin_notes
Join us!
#+end_notes
** Last open loop
Still haven't established communication with Jake Becker

#+begin_notes
Hey Jake, if you're out there... Please reach out!

We would love the opportunity to work with you on this community project
#+end_notes
** Yaks
- Dwarlixir
- ECStatic
- alchemist.el
- elixir-ls
- an actual community

#+begin_notes
Only took me about a year...
#+end_notes
* Resources
- [[https://github.com/Trevoke/dwarlixir][Dwarlixir on Github]]
- [[https://github.com/elixir-lsp][Elixir LSP on Github]]
- elixir-lang.slack.com → #language-server
- [[https://www.kernel.org/doc/gorman/html/understand/understand016.html][Linux OOM killer]]
- [[http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en][Alan Kay on OOP]]
- [[http://zxq9.com/erlmud/][ErlMud]]
- [[https://github.com/Trevoke/ecstatic][Ecstatic on Github]]
* Q&A
If I don't know the answer, I'll make up a good one
